{"ast":null,"code":"class Train {\n  constructor(name, locomotive, wagons, track) {\n    this.posX = track.getCurrentStation().posX;\n    this.posY = track.getCurrentStation().posY;\n    this.track = track;\n    this.name = name;\n    this.locomotive = locomotive;\n    this.wagons = wagons;\n    this.distanceToDestination = this.calculateDistanceToDestination();\n  }\n  get_occupied_seats() {\n    let occupied_seats = 0;\n    this.wagons.forEach(wagon => {\n      wagon.seats.forEach(seat => {\n        occupied_seats += seat.isOccupied ? 1 : 0;\n      });\n    });\n    return occupied_seats;\n  }\n  get_all_seats() {\n    let seats = 0;\n    this.wagons.forEach(wagon => {\n      seats += wagon.seats.length;\n    });\n    return seats;\n  }\n  update_position(deltaTime) {\n    this.updatePosition(deltaTime);\n  }\n  calculateDistanceToDestination() {\n    return Math.sqrt(Math.pow(this.track.getNextStation().posX - this.posX, 2) + Math.pow(this.track.getNextStation().posY - this.posY, 2));\n  }\n  updatePosition(deltaTime) {\n    const distanceToTravel = this.locomotive.speed * deltaTime / 1000; // Convert deltaTime from milliseconds to seconds\n    const distanceRatio = distanceToTravel / this.distanceToDestination;\n\n    // Move towards the destination\n    this.posX += (this.track.getNextStation().posX - this.posX) * distanceRatio;\n    this.posY += (this.track.getNextStation().posY - this.posY) * distanceRatio;\n\n    // Update the distance to the destination\n    this.distanceToDestination = this.calculateDistanceToDestination();\n    // if(this.distanceToDestination < 10)\n    //   this.track.goToNextTation();\n  }\n}\nexport default Train;","map":{"version":3,"names":["Train","constructor","name","locomotive","wagons","track","posX","getCurrentStation","posY","distanceToDestination","calculateDistanceToDestination","get_occupied_seats","occupied_seats","forEach","wagon","seats","seat","isOccupied","get_all_seats","length","update_position","deltaTime","updatePosition","Math","sqrt","pow","getNextStation","distanceToTravel","speed","distanceRatio"],"sources":["C:/Users/macie/OneDrive/Pulpit/my-app/src/Canvas/Logic/Train.js"],"sourcesContent":["\r\nclass Train {\r\n    constructor(name, locomotive, wagons, track)\r\n    {\r\n      this.posX = track.getCurrentStation().posX;\r\n      this.posY = track.getCurrentStation().posY;\r\n      this.track = track;\r\n      this.name = name;\r\n      this.locomotive = locomotive;\r\n      this.wagons = wagons;\r\n      this.distanceToDestination = this.calculateDistanceToDestination();\r\n    }\r\n\r\n    get_occupied_seats()\r\n    {\r\n      let occupied_seats = 0;\r\n      this.wagons.forEach(wagon => {\r\n        wagon.seats.forEach(seat => {\r\n          occupied_seats += seat.isOccupied ? 1 : 0;\r\n        });\r\n      });\r\n      return occupied_seats;\r\n    }\r\n\r\n    get_all_seats()\r\n    {\r\n      let seats = 0;\r\n      this.wagons.forEach(wagon => {\r\n        seats += wagon.seats.length;\r\n      });\r\n      return seats;\r\n    }\r\n\r\n    update_position(deltaTime)\r\n    {\r\n      this.updatePosition(deltaTime)\r\n    }\r\n\r\n    calculateDistanceToDestination() {\r\n      return Math.sqrt(\r\n        Math.pow(this.track.getNextStation().posX - this.posX, 2) +\r\n        Math.pow(this.track.getNextStation().posY - this.posY, 2)\r\n      );\r\n    }\r\n  \r\n    updatePosition(deltaTime) {\r\n      const distanceToTravel = this.locomotive.speed * deltaTime / 1000; // Convert deltaTime from milliseconds to seconds\r\n      const distanceRatio = distanceToTravel / this.distanceToDestination;\r\n  \r\n      // Move towards the destination\r\n      this.posX += (this.track.getNextStation().posX - this.posX) * distanceRatio;\r\n      this.posY += (this.track.getNextStation().posY - this.posY) * distanceRatio;\r\n  \r\n      // Update the distance to the destination\r\n      this.distanceToDestination = this.calculateDistanceToDestination();\r\n      // if(this.distanceToDestination < 10)\r\n      //   this.track.goToNextTation();\r\n    }\r\n}\r\n\r\nexport default Train;"],"mappings":"AACA,MAAMA,KAAK,CAAC;EACRC,WAAWA,CAACC,IAAI,EAAEC,UAAU,EAAEC,MAAM,EAAEC,KAAK,EAC3C;IACE,IAAI,CAACC,IAAI,GAAGD,KAAK,CAACE,iBAAiB,CAAC,CAAC,CAACD,IAAI;IAC1C,IAAI,CAACE,IAAI,GAAGH,KAAK,CAACE,iBAAiB,CAAC,CAAC,CAACC,IAAI;IAC1C,IAAI,CAACH,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACH,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACK,qBAAqB,GAAG,IAAI,CAACC,8BAA8B,CAAC,CAAC;EACpE;EAEAC,kBAAkBA,CAAA,EAClB;IACE,IAAIC,cAAc,GAAG,CAAC;IACtB,IAAI,CAACR,MAAM,CAACS,OAAO,CAACC,KAAK,IAAI;MAC3BA,KAAK,CAACC,KAAK,CAACF,OAAO,CAACG,IAAI,IAAI;QAC1BJ,cAAc,IAAII,IAAI,CAACC,UAAU,GAAG,CAAC,GAAG,CAAC;MAC3C,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,OAAOL,cAAc;EACvB;EAEAM,aAAaA,CAAA,EACb;IACE,IAAIH,KAAK,GAAG,CAAC;IACb,IAAI,CAACX,MAAM,CAACS,OAAO,CAACC,KAAK,IAAI;MAC3BC,KAAK,IAAID,KAAK,CAACC,KAAK,CAACI,MAAM;IAC7B,CAAC,CAAC;IACF,OAAOJ,KAAK;EACd;EAEAK,eAAeA,CAACC,SAAS,EACzB;IACE,IAAI,CAACC,cAAc,CAACD,SAAS,CAAC;EAChC;EAEAX,8BAA8BA,CAAA,EAAG;IAC/B,OAAOa,IAAI,CAACC,IAAI,CACdD,IAAI,CAACE,GAAG,CAAC,IAAI,CAACpB,KAAK,CAACqB,cAAc,CAAC,CAAC,CAACpB,IAAI,GAAG,IAAI,CAACA,IAAI,EAAE,CAAC,CAAC,GACzDiB,IAAI,CAACE,GAAG,CAAC,IAAI,CAACpB,KAAK,CAACqB,cAAc,CAAC,CAAC,CAAClB,IAAI,GAAG,IAAI,CAACA,IAAI,EAAE,CAAC,CAC1D,CAAC;EACH;EAEAc,cAAcA,CAACD,SAAS,EAAE;IACxB,MAAMM,gBAAgB,GAAG,IAAI,CAACxB,UAAU,CAACyB,KAAK,GAAGP,SAAS,GAAG,IAAI,CAAC,CAAC;IACnE,MAAMQ,aAAa,GAAGF,gBAAgB,GAAG,IAAI,CAAClB,qBAAqB;;IAEnE;IACA,IAAI,CAACH,IAAI,IAAI,CAAC,IAAI,CAACD,KAAK,CAACqB,cAAc,CAAC,CAAC,CAACpB,IAAI,GAAG,IAAI,CAACA,IAAI,IAAIuB,aAAa;IAC3E,IAAI,CAACrB,IAAI,IAAI,CAAC,IAAI,CAACH,KAAK,CAACqB,cAAc,CAAC,CAAC,CAAClB,IAAI,GAAG,IAAI,CAACA,IAAI,IAAIqB,aAAa;;IAE3E;IACA,IAAI,CAACpB,qBAAqB,GAAG,IAAI,CAACC,8BAA8B,CAAC,CAAC;IAClE;IACA;EACF;AACJ;AAEA,eAAeV,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}